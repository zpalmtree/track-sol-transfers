{"version":3,"sources":["img/genesysgologo.png","img/rug-scene-investigation-logo.png","App.tsx","reportWebVitals.ts","index.tsx"],"names":["BATCH_SIZE","StyledTableCell","withStyles","theme","root","color","fontSize","textTransform","fontFamily","head","body","TableCell","AddressTableCell","useRowStyles","makeStyles","borderBottom","useIconStyles","sleep","ms","Promise","resolve","setTimeout","getTransaction","connection","signature","setLogMessage","ownerAddress","a","commitment","tx","meta","err","keys","transaction","message","accountKeys","solBefore","preBalances","solAfter","postBalances","changes","length","SystemProgram","programId","i","key","before","after","toString","change","push","address","Row","props","row","handleExpand","classes","iconClasses","TableRow","className","align","IconButton","aria-label","size","onClick","expanded","style","total","LAMPORTS_PER_SOL","toFixed","paddingBottom","paddingTop","colSpan","Collapse","in","timeout","unmountOnExit","display","flexDirection","marginBottom","transactions","map","href","marginTop","textDecoration","App","React","useState","rpc","setRpc","setAddress","logMessage","finding","setFinding","setTransactions","cancel","useRef","newTransactions","_","Connection","confirmTransactionInitialTimeout","pubKey","PublicKey","signatures","beforeSignature","undefined","current","getConfirmedSignaturesForAddress2","newSignatures","concat","s","movementMap","Map","itemsRemaining","Math","min","processing","j","item","sig","all","results","result","addressData","get","set","collated","values","sort","b","abs","useEffect","findTransactions","alignItems","justifyContent","alt","src","RugSceneInvestigationLogo","width","marginRight","value","onChange","e","target","backgroundColor","border","padding","borderRadius","TableContainer","component","Table","TableHead","TableBody","GenesysGoLogo","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b0aac3c3.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/genesysgologo.a5ac975b.png\";","export default __webpack_public_path__ + \"static/media/rug-scene-investigation-logo.0997e776.png\";","import React, { Dispatch, SetStateAction } from 'react';\nimport { LAMPORTS_PER_SOL, Connection, PublicKey, SystemProgram } from '@solana/web3.js';\nimport Collapse from '@material-ui/core/Collapse';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport { withStyles, makeStyles } from '@material-ui/core/styles';\nimport KeyboardArrowDownIcon from '@material-ui/icons/KeyboardArrowDown';\nimport KeyboardArrowUpIcon from '@material-ui/icons/KeyboardArrowUp';\nimport IconButton from '@material-ui/core/IconButton';\nimport * as _ from 'lodash';\nimport GenesysGoLogo from './img/genesysgologo.png';\nimport RugSceneInvestigationLogo from './img/rug-scene-investigation-logo.png';\n\nimport './App.css';\n\nconst RPC_URL = 'https://ssc-dao.genesysgo.net/';\nconst BATCH_SIZE = 20;\n\nconst StyledTableCell = withStyles((theme) => ({\n    root: {\n        color: 'white',\n        fontSize: '20px',\n        textTransform: 'none',\n        fontFamily: 'Agenda-Bold, Arial, sans-serif',\n    },\n    head: {\n        fontSize: '30px',\n    },\n    body: {\n        fontSize: '26px',\n    }\n}))(TableCell);\n\nconst AddressTableCell = withStyles((theme) => ({\n    root: {\n        fontSize: '20px',\n        fontFamily: 'monospace',\n    }\n}))(StyledTableCell)\n\nconst useRowStyles = makeStyles({\n    root: {\n        '& > *': {\n            borderBottom: 'unset',\n        },\n    },\n});\n\nconst useIconStyles = makeStyles({\n    root: {\n        color: 'white',\n    }\n});\n\ninterface IRow {\n    expanded: boolean;\n    total: number;\n    transactions: string[];\n    address: string;\n}\n\ninterface IRowProps {\n    handleExpand: (address: string) => void;\n    row: IRow;\n}\n\nfunction sleep(ms: number): Promise<void> {\n    return new Promise(resolve => setTimeout(resolve, ms));\n}\n\nasync function getTransaction(\n    connection: Connection,\n    signature: string,\n    setLogMessage: Dispatch<SetStateAction<string>>,\n    ownerAddress: PublicKey) {\n\n    while (true) {\n        try {\n            const tx = await connection.getTransaction(signature, { commitment: 'confirmed' });\n\n            if (!tx || !tx.meta) {\n                return;\n            }\n\n            if (tx.meta.err) {\n                return;\n            }\n\n            const keys = tx.transaction.message.accountKeys;\n\n            const solBefore = tx.meta.preBalances;\n            const solAfter = tx.meta.postBalances;\n\n            const changes = [];\n\n            if (keys.length !== 3 && keys[2] !== SystemProgram.programId) {\n                return;\n            }\n\n            let i = 0;\n\n            for (const key of keys) {\n                const before = solBefore[i];\n                const after = solAfter[i];\n\n                i++;\n\n                if (key.toString() === ownerAddress.toString()) {\n                    continue;\n                }\n                \n                if (before === after) {\n                    continue;\n                }\n\n                const change = before - after;\n\n                changes.push({\n                    address: key.toString(),\n                    change,\n                    signature,\n                });\n            }\n\n            return changes;\n        } catch (err) {\n            setLogMessage(`Error fetching transaction: ${(err as any).toString()}, retrying in 1 second...`);\n            sleep(1000);\n            continue;\n        }\n    }\n}\n\nfunction Row(props: IRowProps) {\n    const {\n        row,\n        handleExpand,\n    } = props;\n\n    const classes = useRowStyles();\n    const iconClasses = useIconStyles();\n\n    return (\n        <>\n            <TableRow key={row.address} className={classes.root}>\n                <StyledTableCell align=\"center\">\n                    <IconButton aria-label=\"expand row\" size=\"small\" onClick={() => handleExpand(row.address)}>\n                        {row.expanded\n                            ? <KeyboardArrowUpIcon className={iconClasses.root}/>\n                            : <KeyboardArrowDownIcon className={iconClasses.root}/>}\n                    </IconButton>\n                </StyledTableCell>\n                <AddressTableCell align=\"center\">{row.address}</AddressTableCell>\n                <StyledTableCell align=\"center\" style={{ color: row.total > 0 ? 'white' : 'red' }}>\n                    {`${(row.total / LAMPORTS_PER_SOL).toFixed(3)} SOL`}\n                </StyledTableCell>\n            </TableRow>\n            <TableRow>\n                <TableCell style={{ paddingBottom: 0, paddingTop: 0 }} colSpan={6}>\n                    <Collapse in={row.expanded} timeout=\"auto\" unmountOnExit>\n                        <div style={{ display: 'flex', flexDirection: 'column', marginBottom: '10px' }}>\n                            {row.transactions.map((tx) => (\n                                <a href={`https://solscan.io/tx/${tx}`} style={{ color: 'white', fontFamily: 'monospace', marginTop: '5px', textDecoration: 'none' }}>\n                                    {tx}\n                                </a>\n                            ))}\n                        </div>\n                    </Collapse>\n                </TableCell>\n            </TableRow>\n        </>\n    );\n}\n\nfunction App() {\n    const [rpc, setRpc] = React.useState<string>(RPC_URL);\n    const [address, setAddress] = React.useState<string>('');\n    const [logMessage, setLogMessage] = React.useState<string>('');\n    const [finding, setFinding] = React.useState<boolean>(false);\n    const [transactions, setTransactions] = React.useState<any[]>([]);\n\n    const cancel = React.useRef(false);\n\n    function handleExpand(address: string) {\n        const newTransactions = _.cloneDeep(transactions);\n\n        for (const tx of newTransactions) {\n            if (tx.address === address) {\n                tx.expanded = !tx.expanded;\n            }\n        }\n\n        setTransactions(newTransactions);\n    }\n\n    function handleRpcChange(e: React.ChangeEvent<HTMLInputElement>) {\n        setRpc(e.target.value);\n    }\n\n    function handleAddressChange(e: React.ChangeEvent<HTMLInputElement>) {\n        setAddress(e.target.value);\n    }\n\n    function handleToggleFind() {\n        if (!address) {\n            setLogMessage('No address given');\n            return;\n        }\n\n        if (finding) {\n            setLogMessage('Cancelled.');\n        }\n\n        setFinding((finding) => !finding);\n    }\n\n    async function findTransactions() {\n        setTransactions([]);\n\n        const connection = new Connection(rpc, {\n            confirmTransactionInitialTimeout: 60 * 1000,\n        });\n\n        const pubKey = new PublicKey(address);\n\n        let signatures: string[] = [];\n\n        let beforeSignature = undefined;\n\n        while (true) {\n            if (cancel.current) {\n                return;\n            }\n\n            try {\n                const newSignatures = await connection.getConfirmedSignaturesForAddress2(pubKey, {\n                    before: beforeSignature,\n                });\n\n                if (newSignatures.length === 0) {\n                    setLogMessage(`Finished collecting ${signatures.length} signatures.`);\n                    break;\n                }\n\n                signatures = signatures.concat(newSignatures.map((s) => s.signature));\n\n                setLogMessage(`Collected ${signatures.length} signatures...`);\n\n                /* Just so the log message actually gets written to the screen */\n                await sleep(10);\n\n                beforeSignature = signatures[signatures.length - 1];\n            } catch (err) {\n                setLogMessage(`Failed to collect signatures, retrying in 1 second...`);\n                await sleep(1000);\n                continue;\n            }\n        }\n\n        const movementMap = new Map();\n\n        for (let i = 0; i < signatures.length / BATCH_SIZE; i++) {\n            if (cancel.current) {\n                return;\n            }\n\n            const itemsRemaining = Math.min(BATCH_SIZE, signatures.length - i * BATCH_SIZE);\n            \n            const processing = [];\n\n            for (let j = 0; j < itemsRemaining; j++) {\n                const item = i * BATCH_SIZE + j;\n\n                setLogMessage(`Collecting transaction ${item+1} of ${signatures.length}...`);\n\n                /* Just so the log message actually gets written to the screen */\n                await sleep(10);\n\n                const sig = signatures[item];\n\n                processing.push(getTransaction(connection, sig, setLogMessage, pubKey));\n            }\n\n            const results = await Promise.all(processing);\n\n            for (const result of results) {\n                if (!result) {\n                    continue;\n                }\n\n                if (result.length === 0) {\n                    continue;\n                }\n\n                for (const change of result) {\n                    const addressData = movementMap.get(change.address) || {\n                        total: 0,\n                        transactions: [],\n                        address: change.address,\n                        expanded: false,\n                    };\n\n                    addressData.transactions.push(change.signature);\n                    addressData.total += change.change;\n\n                    movementMap.set(change.address, addressData);\n                }\n            }\n        }\n\n        const collated = [...movementMap.values()].sort((a, b) => Math.abs(b.total) - Math.abs(a.total));\n\n        setTransactions(collated);\n\n        setLogMessage(`Finished fetching transactions.`);\n\n        setFinding(false);\n    }\n\n    React.useEffect(() => {\n        if (!finding) {\n            cancel.current = true;\n            return;\n        }\n\n        cancel.current = false;\n\n        setLogMessage('Finding transactions...');\n\n        findTransactions();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [finding]);\n\n    return (\n        <div style={{ display: 'flex', flexDirection: 'column', alignItems: 'center', justifyContent: 'center' }}>\n            <img\n                alt='rug-scene-logo'\n                src={RugSceneInvestigationLogo}\n                style={{\n                    width: '256px',\n                }}\n            />\n            <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'center' }}>\n                <label style={{ marginRight: '10px', fontSize: '26px', color: 'white', width: '120px', textTransform: 'uppercase' }}>\n                    RPC URL\n                </label>\n\n                <input value={rpc} style={{ width: '600px', fontSize: '20px' }} onChange={handleRpcChange}>\n                </input>\n            </div>\n\n            <div style={{ marginTop: '20px', display: 'flex', alignItems: 'center', justifyContent: 'center' }}>\n                <label style={{ marginRight: '10px', fontSize: '26px', color: 'white', width: '120px', textTransform: 'uppercase' }}>\n                    Address\n                </label>\n\n                <input value={address} style={{ width: '600px', fontSize: '20px' }} onChange={handleAddressChange}/>\n            </div>\n\n            <button\n                style={{\n                    width: '300px',\n                    marginTop: '30px',\n                    fontSize: '26px',\n                    textTransform: 'uppercase',\n                    color: 'white',\n                    backgroundColor: '#a768fd',\n                    border: 'none',\n                    padding: '5px',\n                    borderRadius: '5px'\n                }}\n                onClick={handleToggleFind}\n            >\n                {finding ? 'Cancel' : 'Find Transactions'}\n            </button>\n\n            <div style={{ width: '90%', marginTop: '40px' }}>\n                <TableContainer component='div'>\n                    <Table>\n                        <TableHead>\n                            <TableRow>\n                                <StyledTableCell align=\"center\" style={{ width: '200px' }}>\n                                    Transactions\n                                </StyledTableCell>\n                                <StyledTableCell align=\"center\">\n                                    Address\n                                </StyledTableCell>\n                                <StyledTableCell align=\"center\" style={{ width: '200px' }}>\n                                    SOL Moved\n                                </StyledTableCell>\n                            </TableRow>\n                        </TableHead>\n                        <TableBody>\n                            {transactions.map((row) => (\n                                <Row\n                                    row={row}\n                                    handleExpand={handleExpand}\n                                />\n                            ))}\n                        </TableBody>\n                    </Table>\n                </TableContainer>\n            </div>\n\n            <span style={{ marginTop: '30px', fontSize: '30px', color: 'white', textTransform: 'uppercase', marginBottom: '20px' }}>\n                {logMessage}\n            </span>\n\n            <span style={{ color: 'white', marginTop: '100px' }}>\n                Powered by\n            </span>\n            <img\n                alt='genesysgo-logo'\n                src={GenesysGoLogo}\n                style={{\n                    width: '128px',\n                    marginTop: '20px',\n                }}\n            />\n        </div>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}